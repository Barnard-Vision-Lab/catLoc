%% START A RUN OF THE CATLOC fMRI LOCALIZER EXPERIMENT
% [runTask, scr, res] = catLoc_Start(inParams)
%
% Inputs: 
% - inParams: a struct, generated by catLoc_Params, with many fields that
%   specify stimuli and events 
%
% Outputs: 
% - runTask: a struct, inherited from inParams, with other data fields added
%   over the course of the run 
% - scr: the "screen" struct, with information about the Psychtoolbox
%   screen. This struct is created by the prepScreen_catLoc function,
%   called within the Run function. 
% - res: a struture with some field that report stats about what happened
%   this run. 
% 
% Written by: Alex White, Barnard College 

function [runTask, scr, res] = catLoc_Start(inParams)


%% do eye-tracking?
keepAskingEye = ~any(inParams.EYE == [0 1 999]);
while keepAskingEye
    EYE = input('\nDo you want to do eye-tracking?\n   0=no\n   1=yes\n   999=dummy mode with cursor\n');
    keepAskingEye = ~isfloat(EYE) || (~any(EYE == [0 1 999]));
end

%% Set paths
codePath = catLoc_Base();
cd(codePath);
addpath(genpath(pwd));

%also add analysis path so we can print events.tsv files 
anaPath = fullfile(fileparts(codePath), 'analysis');
addpath(anaPath);

%% Load paramaters and add fields
TR = inParams.TR; 
inParams = rmfield(inParams, 'TR');

params = catstruct(inParams, catLoc_Params(TR));
params.computerName     = getHostName(1);
params.reinitScreen     = true;
params.shutDownScreen   = true;
params.openSecondWindow = false;
params.doStair          = false;

params.codePath = codePath;
params.projPath = fileparts(codePath);
params.dataPath = fullfile(params.projPath,'data');

%% Practice
%confirm just practice
if params.practice
    aquestion = 'Do you really want to do just a short practice block?\n Enter ''y'' or ''n''\n';
    doPracticeResp='xxx';
    while (~strcmp(doPracticeResp, 'n') && ~strcmp(doPracticeResp, 'y'))
        doPracticeResp = input(aquestion, 's');
    end
    params.practice = strcmp(doPracticeResp, 'y');
end

if params.practice
    taskQ = 'Which task would you like to do? \n    Enter 1 for one-back task, 2 for fixation task\n';

    keepAskingTask = true;
    while keepAskingTask
        chosenTask = input(taskQ);
        keepAskingTask = ~isfloat(chosenTask) || ~(any(chosenTask ==[1 2]));
    end
    
    params.whichTasks = chosenTask;
    
    params.pracEYE = params.EYE;
    %special settings for practice: just 1 run, 1 block
    params.practice     = true;
    params.numRuns      = 1;
    params.time.initialBlank = params.time.practiceInitialBlank;
    params.time.finalBlank   = params.time.practiceFinalBlank;
    
    params.org.trialsPerCatPerRun = params.org.practiceTrialsPerCatPerRun; %total trials per category per run
    params.org.trialsPerRun       = params.org.practiceTrialsPerRun;
    params.org.totalImgPerCategory = params.org.practiceImgPerCategory;
else
    params.practice = false;
end

%% set up trials
if strcmp(params.stimLaterality, 'uni')
    params = catLoc_SetRunAndTrialOrder_Unilateral(params);
else
    params = catLoc_SetRunAndTrialOrder(params);
end
%% Run the scan
runTask = [];
scr = [];
res = [];
try
    [runTask, scr, res] = catLoc_Run(params);
catch me
    if params.EYE>0
        Eyelink('stoprecording');
        Eyelink('closefile');
        Eyelink('shutdown');
    end
    PsychPortAudio('Close');
    ListenChar(1);
    ShowCursor;
    RestoreCluts; %to undo effect of loading normalized gamma table
    
    sca;
    
    rethrow(me);
end



